(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{722:function(v,_,e){"use strict";e.r(_);var t=e(40),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"容器-container-和镜像-image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器-container-和镜像-image"}},[v._v("#")]),v._v(" 容器(Container)和镜像(Image)")]),v._v(" "),e("p",[e("strong",[v._v("镜像")]),v._v("：Docker 镜像可以理解为包含应用程序及其相关依赖的一个基础文件系统，在 Docker 容器的启动过程中，它以只读的方式用于"),e("strong",[v._v("创建容器的运行环境。")])]),v._v(" "),e("p",[e("strong",[v._v("容器")]),v._v("： 容器的实质就是一个"),e("strong",[v._v("进程")]),v._v("， 但是容器进程运行于属于自己的独立命名空间中。因此容器可以拥有自己的 "),e("code",[v._v("root")]),v._v(" 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。")]),v._v(" "),e("p",[v._v("所以镜像指的是包含运行环境的只读文件系统，而容器可以说是在镜像环境下运行的程序。")]),v._v(" "),e("p",[e("strong",[v._v("关系")]),v._v("： 镜像和容器的关系，就像是面向对象程序设计中的类和实例的关系。镜像是静态的类，而容器是镜像运行时的实体。")]),v._v(" "),e("h2",{attrs:{id:"容器基本操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器基本操作"}},[v._v("#")]),v._v(" 容器基本操作")]),v._v(" "),e("p",[v._v("首先我们需要了解容器存在的状态：")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("Created")]),v._v("： 已经创建完毕，相关资源已经准备就绪，但是容器中的程序还处于未运行的状态。")]),v._v(" "),e("li",[e("strong",[v._v("Running")]),v._v("： 容器（容器中的应用）正在运行。")]),v._v(" "),e("li",[e("strong",[v._v("Paused")]),v._v("： 容器中的所有程序处于"),e("strong",[v._v("暂停")]),v._v("的状态。")]),v._v(" "),e("li",[e("strong",[v._v("Stopped")]),v._v("： 容器中的程序处理停止状态。")]),v._v(" "),e("li",[e("strong",[v._v("Created")]),v._v("：容器已经删除，相关占用的资源及存储，在 Docker 中的管理信息都已经被释放和删除。")])]),v._v(" "),e("p",[v._v("操作命令")]),v._v(" "),e("p",[e("small",[v._v("备注： 下面命令中的"),e("code",[v._v("name")]),v._v("指的是容器名称， "),e("code",[v._v("image")]),v._v("指的是镜像名称。")])]),v._v(" "),e("ul",[e("li",[v._v("创建： "),e("code",[v._v("docker create --name name image")])]),v._v(" "),e("li",[v._v("启动： "),e("code",[v._v("docker start name")])]),v._v(" "),e("li",[v._v("创建+启动： "),e("code",[v._v("docker run --name name --detach image")]),v._v(" --detach: 启动后将程序和控制台分离，使之进入后台模式。")]),v._v(" "),e("li",[v._v("查看："),e("code",[v._v("docker ps --all")])]),v._v(" "),e("li",[v._v("停止："),e("code",[v._v("docker stop name")]),v._v(" (沙盒系统还存在，修改的内容也都保存)")]),v._v(" "),e("li",[v._v("删除： "),e("code",[v._v("docker rm name --force")])]),v._v(" "),e("li",[v._v("进入容器： "),e("code",[v._v("docker exec -it name bash")]),v._v(" 其中 "),e("code",[v._v("-i")]),v._v(" ( "),e("code",[v._v("--interactive")]),v._v(" ) 表示保持我们的输入流。 "),e("code",[v._v("-t")]),v._v(" ( "),e("code",[v._v("--tty")]),v._v(" ) 表示启用一个伪终端，形成我们与 bash 的交互 。")]),v._v(" "),e("li",[v._v("衔接容器： "),e("code",[v._v("docker attach name")]),v._v(" 这个命令最直观的效果可以理解为我们将容器中的主程序转为了“前台”运行 ( 与 "),e("code",[v._v("docker run")]),v._v(" 中的 "),e("code",[v._v("-d")]),v._v(" 选项有相反的意思 )。")])]),v._v(" "),e("h2",{attrs:{id:"容器网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器网络"}},[v._v("#")]),v._v(" 容器网络")]),v._v(" "),e("blockquote",[e("p",[v._v("容器网络实质上也是由 Docker 为应用程序所创造的虚拟环境的一部分，它能让应用从宿主机操作系统的网络环境中独立出来，形成容器自有的"),e("strong",[v._v("网络设备、IP 协议栈、端口套接字、IP 路由表、防火墙等等与网络相关的模块")]),v._v("。")])]),v._v(" "),e("p",[v._v("核心概念")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("沙盒 ( Sandbox )")]),v._v(": 提供容器网络栈，主要是隔离了容器网络和宿主机网络，形成完全独立的容器网络环境。")]),v._v(" "),e("li",[e("strong",[v._v("网络 ( Network )")]),v._v(": "),e("code",[v._v("Docker")]),v._v("内部的虚拟子网，与宿主机网络存在隔离关系，主要目的是形成容器间的安全通讯环境。")]),v._v(" "),e("li",[e("strong",[v._v("端点 ( Endpoint )")]),v._v(": 主要目的是形成一个可以控制的突破封闭网络环境的出入口。当容器的端点与网络的断点匹配之后，就如同在两者之间搭建了桥梁，就能进行数据传输了。")])]),v._v(" "),e("h2",{attrs:{id:"安装应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装应用"}},[v._v("#")]),v._v(" 安装应用")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("apt install docker.io")])]),v._v(" "),e("li",[e("p",[v._v("docker -v")])]),v._v(" "),e("li",[e("p",[v._v("sudo service docker start")])]),v._v(" "),e("li",[e("p",[v._v("docker run hello-world")])]),v._v(" "),e("li",[e("p",[v._v("docker images")])]),v._v(" "),e("li",[e("p",[v._v("docker rmi nameid")])]),v._v(" "),e("li",[e("p",[v._v("docker ps")])]),v._v(" "),e("li",[e("p",[v._v("docker stop nameid")])]),v._v(" "),e("li",[e("p",[v._v("docker rm nameid")])])]),v._v(" "),e("h3",{attrs:{id:"构建容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建容器"}},[v._v("#")]),v._v(" 构建容器")]),v._v(" "),e("p",[v._v("docker build -t koaproject .")]),v._v(" "),e("h3",{attrs:{id:"运行容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行容器"}},[v._v("#")]),v._v(" 运行容器")]),v._v(" "),e("p",[v._v("docker run -d -p 9000:3000 koaproject")]),v._v(" "),e("h3",{attrs:{id:"停止"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#停止"}},[v._v("#")]),v._v(" 停止")]),v._v(" "),e("p",[v._v("docker stop name")]),v._v(" "),e("h3",{attrs:{id:"启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动"}},[v._v("#")]),v._v(" 启动")]),v._v(" "),e("p",[v._v("docker start name")]),v._v(" "),e("h3",{attrs:{id:"重启"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重启"}},[v._v("#")]),v._v(" 重启")]),v._v(" "),e("p",[v._v("docker restart 容器 ID 或容器名 ：不管容器是否启动，直接重启容器")]),v._v(" "),e("h3",{attrs:{id:"重启挂掉的-ps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重启挂掉的-ps"}},[v._v("#")]),v._v(" 重启挂掉的 ps")]),v._v(" "),e("blockquote",[e("p",[v._v("docker restart $(docker ps -a -q)")])]),v._v(" "),e("blockquote",[e("p",[v._v("Docker 安装 redis")])]),v._v(" "),e("p",[v._v("docker pull redis")]),v._v(" "),e("p",[v._v("docker run -d -p 6379:6379 -v $PWD/conf/redis.conf:/usr/local/etc/redis/redis.conf -v $PWD/data:/data --name redis docker.io/redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes")]),v._v(" "),e("h3",{attrs:{id:"pm2-部署项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pm2-部署项目"}},[v._v("#")]),v._v(" pm2 部署项目")]),v._v(" "),e("p",[v._v("pm2 start pm2.yml")]),v._v(" "),e("p",[v._v('pm2 start npm --name "next-blog" -- start\npm2 restart all')]),v._v(" "),e("h2",{attrs:{id:"nginx-使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx-使用"}},[v._v("#")]),v._v(" nginx 使用")]),v._v(" "),e("p",[v._v("sudo apt-get install nginx")]),v._v(" "),e("h3",{attrs:{id:"重启服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重启服务"}},[v._v("#")]),v._v(" 重启服务")]),v._v(" "),e("p",[v._v("sudo nginx -s reload")]),v._v(" "),e("p",[v._v("查看运行断口\nnetstat -lntp")]),v._v(" "),e("p",[v._v("从容停止服务这种方法较 stop 相比就比较温和一些了，需要进程完成当前工作后再停止。")]),v._v(" "),e("p",[v._v("nginx -s quit")]),v._v(" "),e("p",[v._v("立即停止服务这种方法比较强硬，无论进程是否在工作，都直接停止进程。")]),v._v(" "),e("p",[v._v("nginx -s stop")]),v._v(" "),e("p",[v._v("systemctl 停止\nsystemctl 属于 Linux 命令")]),v._v(" "),e("p",[v._v("systemctl stop nginx.service")]),v._v(" "),e("p",[v._v("killall 方法杀死进程直接杀死进程，在上面无效的情况下使用，态度强硬，简单粗暴！")]),v._v(" "),e("p",[v._v("killall nginx")]),v._v(" "),e("p",[v._v("ps -ef | grep php-fpm 查看 php-fpm 所有的进程")]),v._v(" "),e("h3",{attrs:{id:"mysql-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-安装"}},[v._v("#")]),v._v(" mysql 安装")]),v._v(" "),e("p",[v._v("https://www.cnblogs.com/maxiaohei/p/9553542.html")]),v._v(" "),e("p",[v._v("查找 docker hub 上 mysql 镜像")]),v._v(" "),e("p",[v._v("docker search mysql")]),v._v(" "),e("p",[v._v("这里我选择使用官方标签为 5.7 的镜像")]),v._v(" "),e("p",[v._v("docker pull mysql:5.7")]),v._v(" "),e("p",[v._v("查看本地镜像列表，是否下载成功")]),v._v(" "),e("p",[v._v("docker images |grep mysql")]),v._v(" "),e("p",[v._v("使用 mysql 镜像运行容器")]),v._v(" "),e("p",[v._v("docker run -p 3306:3306 --name mysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=zhang19960920... -d mysql:5.6")]),v._v(" "),e("p",[v._v("连接到 mysql 镜像中")]),v._v(" "),e("p",[v._v("docker exec -it mysql bash")]),v._v(" "),e("p",[v._v("mysql -uroot -p123456")]),v._v(" "),e("blockquote",[e("p",[v._v("docker 安装 MongoDB 以及设置用户")])]),v._v(" "),e("p",[v._v("https://www.cnblogs.com/xiaostudy/p/11163234.html")]),v._v(" "),e("p",[v._v("docker pull mongo （拉取镜像 默认最新版本）")]),v._v(" "),e("p",[v._v("docker run -p 27017:27017 -v /tmp/db:/data/db -d mongo（启动镜像）")]),v._v(" "),e("p",[v._v("管理员进入创建用户")]),v._v(" "),e("p",[v._v("docker exec -it 0bd567383755 mongo admin")]),v._v(" "),e("p",[v._v("创建一个 admin 管理员账号")]),v._v(" "),e("p",[v._v("db.createUser({ user: 'admin', pwd: '123456', roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ] });")]),v._v(" "),e("p",[v._v("对 admin 进行身份认证")]),v._v(" "),e("p",[v._v('db.auth("admin","123456");')]),v._v(" "),e("p",[v._v("rm -r 文件夹名称")]),v._v(" "),e("p",[v._v("在 windows 下使用 choco 作为包管理工具")]),v._v(" "),e("h3",{attrs:{id:"安装-choco"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-choco"}},[v._v("#")]),v._v(" 安装 choco")]),v._v(" "),e("p",[v._v("iwr https://chocolatey.org/install.ps1 -UseBasicParsing | iex")]),v._v(" "),e("p",[v._v("插件地址")]),v._v(" "),e("p",[v._v("https://chocolatey.org/packages")])])}),[],!1,null,null,null);_.default=r.exports}}]);