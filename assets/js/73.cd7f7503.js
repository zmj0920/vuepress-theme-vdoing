(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{395:function(t,a,s){"use strict";s.r(a);var n=s(3),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),a("ul",[a("li",[t._v("数据类型主要分为两种:基本数据类型和引用数据类型 基本数据类型又称值类型，")]),t._v(" "),a("li",[t._v("赋予变量的是确确实实的值；而引用数据类型是一个个堆，赋予变量的是引用地址。")])]),t._v(" "),a("p",[t._v("Number(数值型)、String(字符串)、Boolean(布尔型)、Null、Undefined;")]),t._v(" "),a("h2",{attrs:{id:"引用数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型"}},[t._v("#")]),t._v(" 引用数据类型")]),t._v(" "),a("ul",[a("li",[t._v("Object(对象)和 Function(函数);")]),t._v(" "),a("li",[t._v("Object:包括 Object、Array 、Math、Date、RegExp")])]),t._v(" "),a("h2",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),a("h6",{attrs:{id:"重要的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重要的属性"}},[t._v("#")]),t._v(" 重要的属性:")]),t._v(" "),a("p",[t._v("parseFloat,parseInt(str,10);")]),t._v(" "),a("h6",{attrs:{id:"重要的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重要的方法"}},[t._v("#")]),t._v(" 重要的方法 :")]),t._v(" "),a("p",[t._v("toFixed():四舍五入到指定位数")]),t._v(" "),a("p",[t._v("toString():转换为字符串;")]),t._v(" "),a("p",[t._v("valueOf() :获取当前值;")]),t._v(" "),a("h6",{attrs:{id:"特殊-nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊-nan"}},[t._v("#")]),t._v(" 特殊:NaN :")]),t._v(" "),a("p",[t._v("not a number,数值型，表示不是一个数，还有一个判断是否为数值型的方法 isNaN();")]),t._v(" "),a("h2",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),a("h5",{attrs:{id:"属性方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性方法"}},[t._v("#")]),t._v(" 属性方法:")]),t._v(" "),a("ul",[a("li",[t._v("charAt,charCodeAt, 根据索引查找对应的 value 值/ASCII 码; 【索引从 0 开始】")]),t._v(" "),a("li",[t._v("indexOf,lastIndexOf, 根据 value 值查找其在整个字符串中第一次(最后一次)出现时的索引【索引从 0 开始】")]),t._v(" "),a("li",[t._v("toLowerCase,toUpperCase, 全部转换为大小写;")]),t._v(" "),a("li",[t._v("trim,trimLeft,trimRight, 去除首尾空格，ie 有兼容性问题;")]),t._v(" "),a("li",[t._v("concat,split 将多个字符串合并成一个新的字符串;")]),t._v(" "),a("li",[t._v("将一个字符串拆分成数组[注里头参数如果是数字则会将该字符串转换为数组];")]),t._v(" "),a("li",[t._v("slice,substr,substring, 截取字符串;[注:第一个参数均为索引;")]),t._v(" "),a("li",[t._v("slice，substr 第一个参数可以取负值,")]),t._v(" "),a("li",[t._v("substr 第二个参数为到")]),t._v(" "),a("li",[t._v("substring 第二个参数为长度]")]),t._v(" "),a("li",[t._v("match,replace, 正则匹配;")]),t._v(" "),a("li",[t._v("eval:将字符按照 js 代码进行执行;")]),t._v(" "),a("li",[t._v("valueOf:获取字符串值;")])]),t._v(" "),a("h2",{attrs:{id:"boolean-布尔值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean-布尔值"}},[t._v("#")]),t._v(" Boolean(布尔值):")]),t._v(" "),a("ul",[a("li",[t._v("true,false")]),t._v(" "),a("li",[t._v("! 1 否; !! 1 强制转换为 Boolean 类型")])]),t._v(" "),a("h2",{attrs:{id:"math-数学"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#math-数学"}},[t._v("#")]),t._v(" Math(数学)")]),t._v(" "),a("ul",[a("li",[t._v("Math.abs() 取绝对值")]),t._v(" "),a("li",[t._v("Math.ceil() 向上取整")]),t._v(" "),a("li",[t._v("Math.floor() 向下取整")]),t._v(" "),a("li",[t._v("Math.max() 取最大值")]),t._v(" "),a("li",[t._v("Math.min() 取最小值")]),t._v(" "),a("li",[t._v("Math.round() 四舍五入")]),t._v(" "),a("li",[t._v("Math.sqrt() 取平方根")]),t._v(" "),a("li",[t._v("Math.pow(m,n) 取 m 的 n 次方")]),t._v(" "),a("li",[t._v("Math.random() [0,1)的随机数")]),t._v(" "),a("li",[t._v("Math.round(Math.random()*(m-n)+n) [m,n]之间的随机数")])]),t._v(" "),a("h2",{attrs:{id:"date-日期时间型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date-日期时间型"}},[t._v("#")]),t._v(" Date(日期时间型)")]),t._v(" "),a("ul",[a("li",[t._v("new Date() 创建时间")]),t._v(" "),a("li",[t._v("getTime() 获取指定时间距离 1970 年 1 月 1 日之间的毫秒数")]),t._v(" "),a("li",[t._v("getFullYear() 获取年份")]),t._v(" "),a("li",[t._v("getMonth()+1 获取月份")]),t._v(" "),a("li",[t._v("getDate() 获取日期")]),t._v(" "),a("li",[t._v("getDay() 获取星期")]),t._v(" "),a("li",[t._v("getHours(); 获取小时")]),t._v(" "),a("li",[t._v("getMinutes() 获取分钟")]),t._v(" "),a("li",[t._v("getSeconds() 获取秒")])]),t._v(" "),a("h2",{attrs:{id:"function-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-函数"}},[t._v("#")]),t._v(" Function(函数)")]),t._v(" "),a("ul",[a("li",[t._v("（1）函数主要分为两部分:函数定义和函数执行;")]),t._v(" "),a("li",[t._v("(2)函数表达式、匿名函数、自治性函数、———————>闭包(私有作用域,预解释);")]),t._v(" "),a("li",[t._v("(3)预解释:js 代码自上倒下执行时，会先对所有带 var 的进行声明;对所有 function 进行声明并定义;")]),t._v(" "),a("li",[t._v("(4)arguments 函数的参数集合为一个类数组 arguments;")]),t._v(" "),a("li",[t._v("(5)return 终止函数执行，返回;")]),t._v(" "),a("li",[t._v("(6)自执行函数: ()();")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"数据创建方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据创建方式"}},[t._v("#")]),t._v(" 数据创建方式")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("字面量方法")])])]),t._v(" "),a("p",[t._v("var a = '11', b=12,c=true,d=[1,2,3,4],e={'姓名':'张三'},f=function(){}")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("构造函数方法(new 一个)")])])]),t._v(" "),a("p",[t._v("var a = new String('111'),var b=new Number(12) var obj = new Object();")]),t._v(" "),a("h2",{attrs:{id:"检测数据类型的四种方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检测数据类型的四种方法"}},[t._v("#")]),t._v(" 检测数据类型的四种方法")]),t._v(" "),a("h3",{attrs:{id:"typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),a("p",[t._v("最简单也是最直接的检测数据类型的方法;可以用来检测全部的基本数据类型值")]),t._v(" "),a("p",[t._v("缺点是检测引用数据类型只会返回 Object 和 Function，而不会返回具体的 Array 等等")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("typeof(1)==number //true typeof(NaN)==number //true typeof(true)==boolean //true\ntypeof('a')==string //true typeof(null)==object //true\ntypeof(undefined)==undefined //true\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("这里注意的是"),a("code",[t._v("typeof(NaN)")]),t._v("的结果是"),a("code",[t._v("number")])]),t._v(" "),a("h3",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" constructor")]),t._v(" "),a("p",[t._v("返回创建该对象的构造函数。原理:实例可以用原型上的任何方法，\n包括 constructor;缺点是如果自定义了一个构造函数，则只能返回该构造函数，而不能返回最终的数据类型;")]),t._v(" "),a("h3",{attrs:{id:"instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[t._v("#")]),t._v(" instanceof")]),t._v(" "),a("p",[t._v("适用于 new 创造的简单数据类型和所有的引用数据类型。缺点是我们常用的字面量创建的基本数据类型检测会失败；")]),t._v(" "),a("p",[a("code",[t._v("var a = new String('1234'),obj ={'姓名':'张三'}; console.log(a instanceof String);console.log(obj isntanceof Object);")])]),t._v(" "),a("h3",{attrs:{id:"object-prototype-tostring-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring-call"}},[t._v("#")]),t._v(" Object.prototype.toString.call()")]),t._v(" "),a("p",[t._v("通用方法，可以检测所有的数据类型，缺点是返回的结果是[object String]这种格式，\n后期处理较为的麻烦;\n"),a("code",[t._v("var a = '12345'; Object.prototype.toString.call(a);")])]),t._v(" "),a("p",[t._v("注：使用 typeof 和 Object.prototype.toString.call()方法相结合 ;可以简写为 toString.call({})")]),t._v(" "),a("p",[a("code",[t._v("一道古老的面试题: console.log(typeof typeof typeof ([])); //string")])]),t._v(" "),a("h3",{attrs:{id:"number-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-2"}},[t._v("#")]),t._v(" number")]),t._v(" "),a("p",[t._v("0 开头表示八进制，0x 开头表示十六进制")]),t._v(" "),a("p",[t._v("浮点型小数有计算误差，因为使用的是二进制浮点数进行计算")]),t._v(" "),a("h3",{attrs:{id:"nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nan"}},[t._v("#")]),t._v(" NaN")]),t._v(" "),a("p",[t._v("任何与 NaN 比较都为 false")]),t._v(" "),a("h3",{attrs:{id:"null-和-undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined"}},[t._v("#")]),t._v(" null 和 undefined")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}}),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("null")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("undefined")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("异")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("typeof(null)=object")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("typeof(undefined)=undefined")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("同")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("都表示空缺值，if 判断时都为 false")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不包含任何属性和方法")])])])]),t._v(" "),a("p",[t._v("何时会得到 undefined")]),t._v(" "),a("ul",[a("li",[t._v("变量未初始化")]),t._v(" "),a("li",[t._v("未定义属性和数组中的值")]),t._v(" "),a("li",[t._v("函数没有返回值")]),t._v(" "),a("li",[t._v("对于有形参的函数未传入实参")])]),t._v(" "),a("h3",{attrs:{id:"比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[t._v("#")]),t._v(" 比较")]),t._v(" "),a("ul",[a("li",[t._v("基本数据类型是值比较")]),t._v(" "),a("li",[t._v("引用类型是比较的是地址，即是否引用同一个对象")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h3",{attrs:{id:"隐式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换"}},[t._v("#")]),t._v(" 隐式转换")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("==")]),t._v(" "),a("ul",[a("li",[t._v("null==undefined 为 true")]),t._v(" "),a("li",[t._v("数字和字符串比较，字符串转化为数字")]),t._v(" "),a("li",[t._v("布尔值和数字值比较，布尔转化为数字")]),t._v(" "),a("li",[t._v("对象通过 valueof()和 toString()转化为原始值")])])]),t._v(" "),a("li",[a("p",[t._v("if")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v('if(undefined){...} if(null){...} if(""){} if(0){} if(false){...} if(NaN){...}\nlet a=1; if(a){...}\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v('null,undefined,"",0,false,NaN 都会转化为 false')]),t._v(" "),a("p",[t._v("其余转为真")]),t._v(" "),a("p",[a("strong",[t._v("面试考点:")])]),t._v(" "),a("ul",[a("li",[t._v("[],{}也为真")]),t._v(" "),a("li",[t._v("undefined==false 为 false，是因为==并不会将 undefined 操作符转化为 false")])])]),t._v(" "),a("li",[a("p",[t._v("逻辑运算符")]),t._v(" "),a("ul",[a("li",[t._v("+ 比如 字符串与数字相加，数字转化为字符串")]),t._v(" "),a("li",[t._v("！比如 强制将后面的值转化为布尔类型")]),t._v(" "),a("li",[t._v("...")])])])]),t._v(" "),a("h3",{attrs:{id:"显式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显式转换"}},[t._v("#")]),t._v(" 显式转换")]),t._v(" "),a("ul",[a("li",[t._v("Number(),String(),Boolean(),Object()")])])])}),[],!1,null,null,null);a.default=e.exports}}]);